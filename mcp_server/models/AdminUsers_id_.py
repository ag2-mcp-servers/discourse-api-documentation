# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:14+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict


class JsonDeleteRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    block_email: Optional[bool] = None
    block_ip: Optional[bool] = None
    block_urls: Optional[bool] = None
    delete_posts: Optional[bool] = None


class JsonDeleteResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleted: bool


class ApprovedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_template: str
    id: int
    name: str
    username: str


class Group(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allow_membership_requests: bool
    automatic: bool
    bio_cooked: Optional[str] = None
    bio_excerpt: Optional[str] = None
    bio_raw: Optional[str] = None
    can_admin_group: bool
    can_see_members: bool
    default_notification_level: int
    display_name: str
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_url: Optional[str] = None
    full_name: Optional[str] = None
    grant_trust_level: Optional[str] = None
    has_messages: bool
    id: int
    incoming_email: Optional[str] = None
    members_visibility_level: int
    membership_request_template: Optional[str] = None
    mentionable_level: int
    messageable_level: int
    name: str
    primary_group: bool
    public_admission: bool
    public_exit: bool
    publish_read_state: bool
    title: Optional[str] = None
    user_count: int
    visibility_level: int


class PenaltyCounts(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    silenced: int
    suspended: int


class PenaltyCountsModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    silenced: int
    suspended: int
    total: int


class Tl3Requirements(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    days_visited: int
    max_flagged_by_users: int
    max_flagged_posts: int
    min_days_visited: int
    min_likes_given: int
    min_likes_received: int
    min_likes_received_days: int
    min_likes_received_users: int
    min_posts_read: int
    min_posts_read_all_time: int
    min_topics_replied_to: int
    min_topics_viewed: int
    min_topics_viewed_all_time: int
    num_flagged_by_users: int
    num_flagged_posts: int
    num_likes_given: int
    num_likes_received: int
    num_likes_received_days: int
    num_likes_received_users: int
    num_topics_replied_to: int
    on_grace_period: bool
    penalty_counts: PenaltyCountsModel
    posts_read: int
    posts_read_all_time: int
    requirements_lost: bool
    requirements_met: bool
    time_period: int
    topics_viewed: int
    topics_viewed_all_time: int
    trust_level_locked: bool


class JsonGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    active: bool
    admin: bool
    api_key_count: int
    approved_by: Optional[ApprovedBy] = None
    associated_accounts: Optional[List] = None
    avatar_template: str
    badge_count: int
    bounce_score: Optional[int] = None
    can_activate: bool
    can_be_anonymized: bool
    can_be_deleted: bool
    can_be_merged: bool
    can_deactivate: bool
    can_delete_all_posts: bool
    can_delete_sso_record: bool
    can_disable_second_factor: bool
    can_grant_admin: bool
    can_grant_moderation: bool
    can_impersonate: bool
    can_revoke_admin: bool
    can_revoke_moderation: bool
    can_send_activation_email: bool
    can_view_action_logs: bool
    created_at: str
    created_at_age: Optional[float] = None
    days_visited: int
    external_ids: Dict[str, Any]
    flag_level: int
    flags_given_count: int
    flags_received_count: int
    full_suspend_reason: Optional[str] = None
    groups: List[Group]
    id: int
    ip_address: str
    last_emailed_age: Optional[float] = None
    last_emailed_at: Optional[str] = None
    last_seen_age: Optional[float] = None
    last_seen_at: Optional[str] = None
    like_count: int
    like_given_count: int
    manual_locked_trust_level: Optional[str] = None
    moderator: bool
    name: Optional[str] = None
    next_penalty: Optional[str] = None
    penalty_counts: Optional[PenaltyCounts] = None
    post_count: int
    post_edits_count: Optional[int] = None
    posts_read_count: int
    primary_group_id: Optional[str] = None
    private_topics_count: int
    registration_ip_address: Optional[str] = None
    reset_bounce_score_after: Optional[str] = None
    silence_reason: Optional[str] = None
    silenced_by: Optional[str] = None
    single_sign_on_record: Optional[str] = None
    staged: bool
    suspended_by: Optional[str] = None
    time_read: int
    title: Optional[str] = None
    tl3_requirements: Optional[Tl3Requirements] = None
    topic_count: int
    topics_entered: int
    trust_level: int
    username: str
    warnings_received_count: int
