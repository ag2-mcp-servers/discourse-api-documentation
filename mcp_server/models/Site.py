# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:14+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict


class Archetype(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str
    name: str
    options: List


class RequiredTagGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    min_count: int
    name: str


class Category(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allow_global_tags: bool
    allowed_tag_groups: List
    allowed_tags: List
    can_edit: bool
    color: str
    custom_fields: Optional[Dict[str, Any]] = None
    default_list_filter: str
    default_top_period: str
    default_view: Optional[str] = None
    description: Optional[str] = None
    description_excerpt: Optional[str] = None
    description_text: Optional[str] = None
    form_template_ids: Optional[List] = None
    has_children: bool
    id: int
    minimum_required_tags: int
    name: str
    navigate_to_first_post_after_read: bool
    notification_level: int
    num_featured_topics: int
    parent_category_id: Optional[int] = None
    permission: int
    position: int
    post_count: int
    read_only_banner: Optional[str] = None
    read_restricted: bool
    required_tag_groups: List[RequiredTagGroup]
    show_subcategory_list: bool
    slug: str
    sort_ascending: Optional[str] = None
    sort_order: Optional[str] = None
    subcategory_list_style: str
    text_color: str
    topic_count: int
    topic_template: Optional[str] = None
    topic_url: str
    uploaded_background: Optional[str] = None
    uploaded_logo: Optional[str] = None
    uploaded_logo_dark: Optional[str] = None


class Group(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_url: Optional[str] = None
    id: int
    name: str


class NotificationTypes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assigned: Optional[int] = None
    bookmark_reminder: int
    chat_group_mention: int
    chat_invitation: int
    chat_mention: int
    chat_message: int
    chat_quoted: Optional[int] = None
    circles_activity: Optional[int] = None
    code_review_commit_approved: int
    custom: int
    edited: int
    event_invitation: int
    event_reminder: int
    following: Optional[int] = None
    following_created_topic: Optional[int] = None
    following_replied: Optional[int] = None
    granted_badge: int
    group_mentioned: int
    group_message_summary: int
    invited_to_private_message: int
    invited_to_topic: int
    invitee_accepted: int
    liked: int
    liked_consolidated: int
    linked: int
    membership_request_accepted: int
    membership_request_consolidated: int
    mentioned: int
    moved_post: int
    new_features: Optional[int] = None
    post_approved: int
    posted: int
    private_message: int
    question_answer_user_commented: Optional[int] = None
    quoted: int
    reaction: int
    replied: int
    topic_reminder: int
    votes_released: int
    watching_category_or_tag: int
    watching_first_post: int


class PostActionType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str
    id: Optional[int] = None
    is_custom_flag: bool
    is_flag: bool
    name: str
    name_key: Optional[str] = None
    short_description: str


class PostTypes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    moderator_action: int
    regular: int
    small_action: int
    whisper: int


class TopicFlagType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str
    id: Optional[int] = None
    is_custom_flag: bool
    is_flag: bool
    name: str
    name_key: Optional[str] = None
    short_description: str


class TrustLevels(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    basic: int
    leader: int
    member: int
    newuser: int
    regular: int


class UserColorScheme(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: int
    is_dark: bool
    name: str


class UserTheme(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    color_scheme_id: Optional[int] = None
    default: bool
    name: str
    theme_id: int


class JsonGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    anonymous_top_menu_items: List
    archetypes: List[Archetype]
    auth_providers: List
    can_associate_groups: Optional[bool] = None
    can_create_tag: bool
    can_tag_pms: bool
    can_tag_topics: bool
    categories: List[Category]
    censored_regexp: List[Dict[str, Any]]
    custom_emoji_translation: Dict[str, Any]
    default_archetype: str
    default_dark_color_scheme: Optional[Dict[str, Any]] = None
    displayed_about_plugin_stat_groups: Optional[List] = None
    filters: List
    groups: List[Group]
    hashtag_configurations: Optional[Dict[str, Any]] = None
    hashtag_icons: Optional[List] = None
    markdown_additional_options: Optional[Dict[str, Any]] = None
    notification_types: NotificationTypes
    periods: List
    post_action_types: List[PostActionType]
    post_types: PostTypes
    show_welcome_topic_banner: Optional[bool] = None
    tags_filter_regexp: str
    top_menu_items: List
    top_tags: List
    topic_featured_link_allowed_category_ids: List
    topic_flag_types: List[TopicFlagType]
    trust_levels: TrustLevels
    uncategorized_category_id: int
    user_color_schemes: List[UserColorScheme]
    user_field_max_length: int
    user_fields: List
    user_themes: List[UserTheme]
    watched_words_link: Optional[str] = None
    watched_words_replace: Optional[str] = None
    whispers_allowed_groups_names: Optional[List] = None
    wizard_required: Optional[bool] = None
