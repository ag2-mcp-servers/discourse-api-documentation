# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:14+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, ConfigDict, Field


class JsonDeleteRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    usernames: Optional[str] = Field(
        None, description='comma separated list', examples=['username1,username2']
    )


class JsonDeleteResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    skipped_usernames: List
    success: str
    usernames: List


class Member(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    added_at: str
    avatar_template: str
    id: int
    last_posted_at: str
    last_seen_at: str
    name: Optional[str] = None
    timezone: str
    title: Optional[str] = None
    username: str


class Meta(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    limit: int
    offset: int
    total: int


class Owner(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    added_at: str
    avatar_template: str
    id: int
    last_posted_at: str
    last_seen_at: str
    name: Optional[str] = None
    timezone: str
    title: Optional[str] = None
    username: str


class JsonGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    members: List[Member]
    meta: Meta
    owners: List[Owner]


class JsonPutRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    usernames: Optional[str] = Field(
        None, description='comma separated list', examples=['username1,username2']
    )


class JsonPutResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    emails: List
    success: str
    usernames: List
