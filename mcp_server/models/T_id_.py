# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:14+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict


class ActionsSummaryItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    can_act: bool
    count: int
    hidden: bool
    id: int


class CreatedBy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_template: str
    id: int
    name: str
    username: str


class LastPoster(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_template: str
    id: int
    name: str
    username: str


class Participant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    admin: bool
    avatar_template: str
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_name: Optional[str] = None
    flair_url: Optional[str] = None
    id: int
    moderator: bool
    name: str
    post_count: int
    primary_group_name: Optional[str] = None
    trust_level: int
    username: str


class Details(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    can_archive_topic: bool
    can_close_topic: bool
    can_convert_topic: bool
    can_create_post: bool
    can_delete: bool
    can_edit: bool
    can_edit_staff_notes: bool
    can_flag_topic: Optional[bool] = None
    can_invite_to: Optional[bool] = None
    can_invite_via_email: Optional[bool] = None
    can_moderate_category: bool
    can_move_posts: bool
    can_pin_unpin_topic: bool
    can_remove_allowed_users: bool
    can_remove_self_id: int
    can_reply_as_new_topic: bool
    can_review_topic: bool
    can_split_merge_topic: bool
    can_toggle_topic_visibility: bool
    created_by: CreatedBy
    last_poster: LastPoster
    notification_level: int
    participants: Optional[List[Participant]] = None


class ActionsSummaryItemModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    can_act: bool
    id: int


class LinkCount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clicks: int
    internal: bool
    reflection: bool
    title: str
    url: str


class Post(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    actions_summary: List[ActionsSummaryItemModel]
    admin: bool
    avatar_template: str
    bookmarked: bool
    can_delete: bool
    can_edit: bool
    can_recover: bool
    can_view_edit_history: bool
    can_wiki: bool
    cooked: str
    created_at: str
    deleted_at: Optional[str] = None
    display_username: str
    edit_reason: Optional[str] = None
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_name: Optional[str] = None
    flair_url: Optional[str] = None
    hidden: bool
    id: int
    incoming_link_count: int
    link_counts: List[LinkCount]
    moderator: bool
    name: str
    post_number: int
    post_type: int
    primary_group_name: Optional[str] = None
    quote_count: int
    read: bool
    readers_count: int
    reads: int
    reply_count: int
    reply_to_post_number: Optional[str] = None
    reviewable_id: int
    reviewable_score_count: int
    reviewable_score_pending_count: int
    score: int
    staff: bool
    topic_id: int
    topic_slug: str
    trust_level: int
    updated_at: str
    user_deleted: bool
    user_id: int
    user_title: Optional[str] = None
    username: str
    version: int
    wiki: bool
    yours: bool


class PostStream(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    posts: List[Post]
    stream: List


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avatar_template: str
    id: int
    name: str
    username: str


class Poster(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: str
    extras: str
    user: User


class SuggestedTopic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archetype: str
    archived: bool
    bookmarked: Optional[str] = None
    bumped: bool
    bumped_at: str
    category_id: int
    closed: bool
    created_at: str
    excerpt: str
    fancy_title: str
    featured_link: Optional[str] = None
    highest_post_number: int
    id: int
    image_url: Optional[str] = None
    last_posted_at: Optional[str] = None
    like_count: int
    liked: Optional[str] = None
    pinned: bool
    posters: List[Poster]
    posts_count: int
    reply_count: int
    slug: str
    tags: List
    tags_descriptions: Dict[str, Any]
    title: str
    unpinned: Optional[str] = None
    unseen: bool
    views: int
    visible: bool


class JsonGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    actions_summary: List[ActionsSummaryItem]
    archetype: str
    archived: bool
    bookmarked: bool
    bookmarks: List
    category_id: int
    chunk_size: int
    closed: bool
    created_at: str
    current_post_number: Optional[int] = None
    deleted_at: Optional[str] = None
    deleted_by: Optional[str] = None
    details: Details
    draft: Optional[str] = None
    draft_key: str
    draft_sequence: int
    fancy_title: str
    featured_link: Optional[str] = None
    has_deleted: bool
    has_summary: bool
    highest_post_number: Optional[int] = None
    id: int
    image_url: Optional[str] = None
    last_posted_at: Optional[str] = None
    like_count: int
    message_bus_last_id: int
    participant_count: int
    pinned: bool
    pinned_at: Optional[str] = None
    pinned_globally: bool
    pinned_until: Optional[str] = None
    post_stream: PostStream
    posts_count: int
    reply_count: int
    show_read_indicator: bool
    slow_mode_enabled_until: Optional[str] = None
    slow_mode_seconds: int
    slug: str
    suggested_topics: List[SuggestedTopic]
    tags: List
    tags_descriptions: Dict[str, Any]
    thumbnails: Optional[str] = None
    timeline_lookup: List
    title: str
    topic_timer: Optional[str] = None
    unpinned: Optional[str] = None
    user_id: int
    views: int
    visible: bool
    word_count: Optional[int] = None
