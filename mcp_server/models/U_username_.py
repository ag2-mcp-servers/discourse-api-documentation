# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:33:14+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class CustomFields(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    first_name: Optional[str] = None


class GroupUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    group_id: int
    notification_level: int
    owner: Optional[bool] = None
    user_id: int


class Group(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allow_membership_requests: bool
    automatic: bool
    bio_cooked: Optional[str] = None
    bio_excerpt: Optional[str] = None
    bio_raw: Optional[str] = None
    can_admin_group: bool
    can_see_members: bool
    default_notification_level: int
    display_name: str
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_url: Optional[str] = None
    full_name: Optional[str] = None
    grant_trust_level: Optional[str] = None
    has_messages: bool
    id: int
    incoming_email: Optional[str] = None
    members_visibility_level: int
    membership_request_template: Optional[str] = None
    mentionable_level: int
    messageable_level: int
    name: str
    primary_group: bool
    public_admission: bool
    public_exit: bool
    publish_read_state: bool
    title: Optional[str] = None
    user_count: int
    visibility_level: int


class UserAuthToken(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    browser: str
    client_ip: str
    created_at: str
    device: str
    icon: str
    id: int
    is_active: bool
    location: str
    os: str
    seen_at: str


class UserFields(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_1: Optional[str] = Field(..., alias='1')
    field_2: Optional[str] = Field(..., alias='2')


class UserNotificationSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    day_0_end_time: int
    day_0_start_time: int
    day_1_end_time: int
    day_1_start_time: int
    day_2_end_time: int
    day_2_start_time: int
    day_3_end_time: int
    day_3_start_time: int
    day_4_end_time: int
    day_4_start_time: int
    day_5_end_time: int
    day_5_start_time: int
    day_6_end_time: int
    day_6_start_time: int
    enabled: bool


class UserOption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allow_private_messages: bool
    auto_track_topics_after_msecs: int
    automatically_unpin_topics: bool
    bookmark_auto_delete_preference: Optional[int] = None
    color_scheme_id: Optional[str] = None
    dark_scheme_id: Optional[str] = None
    default_calendar: Optional[str] = None
    digest_after_minutes: int
    dynamic_favicon: bool
    email_digests: bool
    email_in_reply_to: bool
    email_level: int
    email_messages_level: int
    email_previous_replies: int
    enable_allowed_pm_users: bool
    enable_defer: bool
    enable_quoting: bool
    external_links_in_new_tab: bool
    hide_profile_and_presence: bool
    homepage_id: Optional[str] = None
    include_tl0_in_digests: bool
    like_notification_frequency: int
    mailing_list_mode: bool
    mailing_list_mode_frequency: int
    new_topic_duration_minutes: int
    notification_level_when_replying: int
    oldest_search_log_date: Optional[str] = None
    seen_popups: Optional[List[Any]] = None
    sidebar_list_destination: Optional[str] = None
    skip_new_user_tips: bool
    text_size: str
    text_size_seq: int
    theme_ids: List
    theme_key_seq: int
    timezone: Optional[str] = None
    title_count_mode: str
    user_id: int


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    admin: bool
    allowed_pm_usernames: List
    avatar_template: str
    badge_count: int
    can_be_deleted: bool
    can_change_bio: bool
    can_change_location: bool
    can_change_tracking_preferences: bool
    can_change_website: bool
    can_delete_all_posts: bool
    can_edit: bool
    can_edit_email: bool
    can_edit_name: bool
    can_edit_username: bool
    can_ignore_user: bool
    can_mute_user: bool
    can_send_private_message_to_user: bool
    can_send_private_messages: bool
    can_upload_profile_header: bool
    can_upload_user_card_background: bool
    created_at: str
    custom_fields: CustomFields
    featured_topic: Optional[str] = None
    featured_user_badge_ids: List
    flair_bg_color: Optional[str] = None
    flair_color: Optional[str] = None
    flair_group_id: Optional[str] = None
    flair_name: Optional[str] = None
    flair_url: Optional[str] = None
    group_users: List[GroupUser]
    groups: List[Group]
    has_title_badges: bool
    id: int
    ignored: bool
    ignored_usernames: List
    invited_by: Optional[str] = None
    last_posted_at: Optional[str] = None
    last_seen_at: Optional[str] = None
    locale: Optional[str] = None
    mailing_list_posts_per_day: int
    moderator: bool
    muted: bool
    muted_category_ids: List
    muted_tags: List
    muted_usernames: List
    name: str
    pending_count: int
    pending_posts_count: Optional[int] = None
    post_count: int
    primary_group_id: Optional[str] = None
    primary_group_name: Optional[str] = None
    profile_view_count: int
    recent_time_read: int
    regular_category_ids: List
    second_factor_backup_enabled: Optional[bool] = None
    second_factor_enabled: bool
    staged: bool
    system_avatar_template: str
    system_avatar_upload_id: Optional[str] = None
    time_read: int
    title: Optional[str] = None
    tracked_category_ids: List
    tracked_tags: List
    trust_level: int
    uploaded_avatar_id: Optional[str] = None
    use_logo_small_as_avatar: bool
    user_api_keys: Optional[str] = None
    user_auth_tokens: List[UserAuthToken]
    user_fields: Optional[UserFields] = None
    user_notification_schedule: UserNotificationSchedule
    user_option: UserOption
    username: str
    watched_category_ids: List
    watched_first_post_category_ids: List
    watched_tags: List
    watching_first_post_tags: List


class JsonGetResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    user: User
    user_badges: List


class JsonPutRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    external_ids: Optional[Dict[str, Any]] = None
    name: Optional[str] = None
    password: Optional[str] = None


class JsonPutResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    success: str
    user: Dict[str, Any]
